/*
 * Generated by Bluespec Compiler, version 2024.07-4-g6f298148 (build 6f298148)
 * 
 * On Sat Oct  5 22:24:02 CST 2024
 * 
 */

/* Generation options: keep-fires */
#ifndef __sysServerTestUpdate_h__
#define __sysServerTestUpdate_h__

#include "bluesim_types.h"
#include "bs_module.h"
#include "bluesim_primitives.h"
#include "bs_vcd.h"


/* Class declaration for the sysServerTestUpdate module */
class MOD_sysServerTestUpdate : public Module {
 
 /* Clock handles */
 private:
  tClock __clk_handle_0;
 
 /* Clock gate handles */
 public:
  tUInt8 *clk_gate[0];
 
 /* Instantiation parameters */
 public:
 
 /* Module state */
 public:
  MOD_Wire<tUInt8> INST_abort;
  MOD_Reg<tUInt8> INST_idx;
  MOD_Reg<tUInt8> INST_results_0;
  MOD_Reg<tUInt8> INST_results_1;
  MOD_Reg<tUInt32> INST_rg1;
  MOD_Reg<tUInt32> INST_rg2;
  MOD_Reg<tUInt8> INST_running;
  MOD_Reg<tUInt8> INST_start_reg;
  MOD_Reg<tUInt8> INST_start_reg_1;
  MOD_Wire<tUInt8> INST_start_reg_2;
  MOD_Wire<tUInt8> INST_start_wire;
  MOD_Reg<tUInt8> INST_state_can_overlap;
  MOD_Reg<tUInt8> INST_state_fired;
  MOD_Wire<tUInt8> INST_state_fired_1;
  MOD_ConfigReg<tUInt8> INST_state_mkFSMstate;
  MOD_Wire<tUInt8> INST_state_overlap_pw;
  MOD_Wire<tUInt8> INST_state_set_pw;
  MOD_Wire<tUInt8> INST_svr_abort;
  MOD_Reg<tUInt8> INST_svr_enabled;
  MOD_Wire<tUInt64> INST_svr_fifo_in_bypass_enq;
  MOD_Reg<tUInt64> INST_svr_fifo_in_data;
  MOD_Wire<tUInt8> INST_svr_fifo_in_do_deq;
  MOD_Wire<tUInt8> INST_svr_fifo_in_do_enq;
  MOD_Reg<tUInt8> INST_svr_fifo_in_empty;
  MOD_Reg<tUInt8> INST_svr_fifo_in_rvr;
  MOD_Wire<tUInt8> INST_svr_fifo_out_bypass_enq;
  MOD_Reg<tUInt8> INST_svr_fifo_out_data;
  MOD_Wire<tUInt8> INST_svr_fifo_out_do_deq;
  MOD_Wire<tUInt8> INST_svr_fifo_out_do_enq;
  MOD_Reg<tUInt8> INST_svr_fifo_out_empty;
  MOD_Reg<tUInt8> INST_svr_fifo_out_rvr;
  MOD_Reg<tUInt8> INST_svr_start_reg;
  MOD_Wire<tUInt8> INST_svr_start_reg_1;
  MOD_Wire<tUInt8> INST_svr_start_wire;
  MOD_Reg<tUInt8> INST_svr_state_can_overlap;
  MOD_Reg<tUInt8> INST_svr_state_fired;
  MOD_Wire<tUInt8> INST_svr_state_fired_1;
  MOD_ConfigReg<tUInt8> INST_svr_state_mkFSMstate;
  MOD_Wire<tUInt8> INST_svr_state_overlap_pw;
  MOD_Wire<tUInt8> INST_svr_state_set_pw;
 
 /* Constructor */
 public:
  MOD_sysServerTestUpdate(tSimStateHdl simHdl, char const *name, Module *parent);
 
 /* Symbol init methods */
 private:
  void init_symbols_0();
 
 /* Reset signal definitions */
 private:
  tUInt8 PORT_RST_N;
 
 /* Port definitions */
 public:
 
 /* Publicly accessible definitions */
 public:
  tUInt8 DEF_WILL_FIRE___me_check_32;
  tUInt8 DEF_CAN_FIRE___me_check_32;
  tUInt8 DEF_WILL_FIRE___me_check_29;
  tUInt8 DEF_CAN_FIRE___me_check_29;
  tUInt8 DEF_WILL_FIRE___me_check_26;
  tUInt8 DEF_CAN_FIRE___me_check_26;
  tUInt8 DEF_WILL_FIRE___me_check_16;
  tUInt8 DEF_CAN_FIRE___me_check_16;
  tUInt8 DEF_WILL_FIRE___me_check_15;
  tUInt8 DEF_CAN_FIRE___me_check_15;
  tUInt8 DEF_WILL_FIRE___me_check_14;
  tUInt8 DEF_CAN_FIRE___me_check_14;
  tUInt8 DEF_WILL_FIRE___me_check_13;
  tUInt8 DEF_CAN_FIRE___me_check_13;
  tUInt8 DEF_WILL_FIRE___me_check_12;
  tUInt8 DEF_CAN_FIRE___me_check_12;
  tUInt8 DEF_WILL_FIRE___me_check_11;
  tUInt8 DEF_CAN_FIRE___me_check_11;
  tUInt8 DEF_WILL_FIRE_RL_auto_finish;
  tUInt8 DEF_CAN_FIRE_RL_auto_finish;
  tUInt8 DEF_WILL_FIRE_RL_auto_start;
  tUInt8 DEF_CAN_FIRE_RL_auto_start;
  tUInt8 DEF_WILL_FIRE_RL_fsm_start;
  tUInt8 DEF_CAN_FIRE_RL_fsm_start;
  tUInt8 DEF_WILL_FIRE_RL_idle_l46c5;
  tUInt8 DEF_CAN_FIRE_RL_idle_l46c5;
  tUInt8 DEF_WILL_FIRE_RL_action_l50c8;
  tUInt8 DEF_CAN_FIRE_RL_action_l50c8;
  tUInt8 DEF_WILL_FIRE_RL_action_l49c19_1;
  tUInt8 DEF_CAN_FIRE_RL_action_l49c19_1;
  tUInt8 DEF_WILL_FIRE_RL_action_l49c19_F;
  tUInt8 DEF_CAN_FIRE_RL_action_l49c19_F;
  tUInt8 DEF_WILL_FIRE_RL_action_l49c19_T;
  tUInt8 DEF_CAN_FIRE_RL_action_l49c19_T;
  tUInt8 DEF_WILL_FIRE_RL_action_l48c19_1;
  tUInt8 DEF_CAN_FIRE_RL_action_l48c19_1;
  tUInt8 DEF_WILL_FIRE_RL_action_l48c19_F;
  tUInt8 DEF_CAN_FIRE_RL_action_l48c19_F;
  tUInt8 DEF_WILL_FIRE_RL_action_l48c19_T;
  tUInt8 DEF_CAN_FIRE_RL_action_l48c19_T;
  tUInt8 DEF_WILL_FIRE_RL_action_l47c8;
  tUInt8 DEF_CAN_FIRE_RL_action_l47c8;
  tUInt8 DEF_WILL_FIRE_RL_restart;
  tUInt8 DEF_CAN_FIRE_RL_restart;
  tUInt8 DEF_WILL_FIRE_RL_state_every;
  tUInt8 DEF_CAN_FIRE_RL_state_every;
  tUInt8 DEF_WILL_FIRE_RL_state_fired__dreg_update;
  tUInt8 DEF_CAN_FIRE_RL_state_fired__dreg_update;
  tUInt8 DEF_WILL_FIRE_RL_state_handle_abort;
  tUInt8 DEF_CAN_FIRE_RL_state_handle_abort;
  tUInt8 DEF_WILL_FIRE_RL_start_reg__dreg_update;
  tUInt8 DEF_CAN_FIRE_RL_start_reg__dreg_update;
  tUInt8 DEF_WILL_FIRE_RL_svr_fsm_start;
  tUInt8 DEF_CAN_FIRE_RL_svr_fsm_start;
  tUInt8 DEF_WILL_FIRE_RL_svr_idle_l18c10;
  tUInt8 DEF_CAN_FIRE_RL_svr_idle_l18c10;
  tUInt8 DEF_WILL_FIRE_RL_svr_action_l34c13_F;
  tUInt8 DEF_CAN_FIRE_RL_svr_action_l34c13_F;
  tUInt8 DEF_WILL_FIRE_RL_svr_action_l34c13_T;
  tUInt8 DEF_CAN_FIRE_RL_svr_action_l34c13_T;
  tUInt8 DEF_WILL_FIRE_RL_svr_action_f_update_l20c13;
  tUInt8 DEF_CAN_FIRE_RL_svr_action_f_update_l20c13;
  tUInt8 DEF_WILL_FIRE_RL_svr_action_l28c19;
  tUInt8 DEF_CAN_FIRE_RL_svr_action_l28c19;
  tUInt8 DEF_WILL_FIRE_RL_svr_action_l23c19;
  tUInt8 DEF_CAN_FIRE_RL_svr_action_l23c19;
  tUInt8 DEF_WILL_FIRE_RL_svr_action_l22c19;
  tUInt8 DEF_CAN_FIRE_RL_svr_action_l22c19;
  tUInt8 DEF_WILL_FIRE_RL_svr_action_f_init_l20c13;
  tUInt8 DEF_CAN_FIRE_RL_svr_action_f_init_l20c13;
  tUInt8 DEF_WILL_FIRE_RL_svr_action_l19c13;
  tUInt8 DEF_CAN_FIRE_RL_svr_action_l19c13;
  tUInt8 DEF_WILL_FIRE_RL_svr_restart;
  tUInt8 DEF_CAN_FIRE_RL_svr_restart;
  tUInt8 DEF_WILL_FIRE_RL_svr_state_every;
  tUInt8 DEF_CAN_FIRE_RL_svr_state_every;
  tUInt8 DEF_WILL_FIRE_RL_svr_state_fired__dreg_update;
  tUInt8 DEF_CAN_FIRE_RL_svr_state_fired__dreg_update;
  tUInt8 DEF_WILL_FIRE_RL_svr_state_handle_abort;
  tUInt8 DEF_CAN_FIRE_RL_svr_state_handle_abort;
  tUInt8 DEF_WILL_FIRE_RL_svr_start_reg__dreg_update;
  tUInt8 DEF_CAN_FIRE_RL_svr_start_reg__dreg_update;
  tUInt8 DEF_WILL_FIRE_RL_svr_fifo_out_fill_fifo;
  tUInt8 DEF_CAN_FIRE_RL_svr_fifo_out_fill_fifo;
  tUInt8 DEF_WILL_FIRE_RL_svr_fifo_out_empty_fifo;
  tUInt8 DEF_CAN_FIRE_RL_svr_fifo_out_empty_fifo;
  tUInt8 DEF_WILL_FIRE_RL_svr_fifo_out_write_data;
  tUInt8 DEF_CAN_FIRE_RL_svr_fifo_out_write_data;
  tUInt8 DEF_WILL_FIRE_RL_svr_fifo_in_fill_fifo;
  tUInt8 DEF_CAN_FIRE_RL_svr_fifo_in_fill_fifo;
  tUInt8 DEF_WILL_FIRE_RL_svr_fifo_in_empty_fifo;
  tUInt8 DEF_CAN_FIRE_RL_svr_fifo_in_empty_fifo;
  tUInt8 DEF_WILL_FIRE_RL_svr_fifo_in_write_data;
  tUInt8 DEF_CAN_FIRE_RL_svr_fifo_in_write_data;
  tUInt8 DEF_svr_fifo_out_bypass_enq_whas____d9;
  tUInt8 DEF_svr_fifo_in_bypass_enq_whas____d1;
  tUInt8 DEF_b__h7673;
  tUInt8 DEF_svr_fifo_out_empty__h20030;
  tUInt8 DEF_svr_fifo_in_empty__h18048;
 
 /* Local definitions */
 private:
  tUInt64 DEF_svr_fifo_in_bypass_enq_wget____d2;
  tUInt32 DEF__read__h87;
  tUInt32 DEF__read__h62;
  tUInt8 DEF_results_1__h32468;
  tUInt8 DEF_results_0__h32456;
  tUInt8 DEF_svr_fifo_out_bypass_enq_wget____d10;
  tUInt8 DEF_svr_fifo_out_data__h33020;
  tUInt8 DEF_IF_svr_fifo_out_empty_2_THEN_IF_svr_fifo_out_b_ETC___d166;
  tUInt32 DEF_x__h19087;
  tUInt32 DEF_x__h19064;
 
 /* Rules */
 public:
  void RL_svr_fifo_in_write_data();
  void RL_svr_fifo_in_empty_fifo();
  void RL_svr_fifo_in_fill_fifo();
  void RL_svr_fifo_out_write_data();
  void RL_svr_fifo_out_empty_fifo();
  void RL_svr_fifo_out_fill_fifo();
  void RL_svr_start_reg__dreg_update();
  void RL_svr_state_handle_abort();
  void RL_svr_state_fired__dreg_update();
  void RL_svr_state_every();
  void RL_svr_restart();
  void RL_svr_action_l19c13();
  void RL_svr_action_f_init_l20c13();
  void RL_svr_action_l22c19();
  void RL_svr_action_l23c19();
  void RL_svr_action_l28c19();
  void RL_svr_action_f_update_l20c13();
  void RL_svr_action_l34c13_T();
  void RL_svr_action_l34c13_F();
  void RL_svr_idle_l18c10();
  void RL_svr_fsm_start();
  void RL_start_reg__dreg_update();
  void RL_state_handle_abort();
  void RL_state_fired__dreg_update();
  void RL_state_every();
  void RL_restart();
  void RL_action_l47c8();
  void RL_action_l48c19_T();
  void RL_action_l48c19_F();
  void RL_action_l48c19_1();
  void RL_action_l49c19_T();
  void RL_action_l49c19_F();
  void RL_action_l49c19_1();
  void RL_action_l50c8();
  void RL_idle_l46c5();
  void RL_fsm_start();
  void RL_auto_start();
  void RL_auto_finish();
  void __me_check_11();
  void __me_check_12();
  void __me_check_13();
  void __me_check_14();
  void __me_check_15();
  void __me_check_16();
  void __me_check_26();
  void __me_check_29();
  void __me_check_32();
 
 /* Methods */
 public:
 
 /* Reset routines */
 public:
  void reset_RST_N(tUInt8 ARG_rst_in);
 
 /* Static handles to reset routines */
 public:
 
 /* Pointers to reset fns in parent module for asserting output resets */
 private:
 
 /* Functions for the parent module to register its reset fns */
 public:
 
 /* Functions to set the elaborated clock id */
 public:
  void set_clk_0(char const *s);
 
 /* State dumping routine */
 public:
  void dump_state(unsigned int indent);
 
 /* VCD dumping routines */
 public:
  unsigned int dump_VCD_defs(unsigned int levels);
  void dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_sysServerTestUpdate &backing);
  void vcd_defs(tVCDDumpType dt, MOD_sysServerTestUpdate &backing);
  void vcd_prims(tVCDDumpType dt, MOD_sysServerTestUpdate &backing);
};

#endif /* ifndef __sysServerTestUpdate_h__ */
